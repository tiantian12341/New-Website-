(function ($, sp) { "use strict"; $.spworkflow = { render: function ($self) { var dfop = $self[0].dfop; $self.addClass('sp-workflow'); if (!dfop.isPreview) { var $tool = $('<div class="sp-workflow-tool" ></div>'); $tool[0].dfop = dfop; $tool.append('<a  type="cursor" class="sp-workflow-btndown" id="' + dfop.id + '_btn_cursor" title="' + dfop.nodeRemarks.cursor + '" ><b class="ico_cursor" /></a>'); $tool.append('<a  type="direct" class="sp-workflow-btn" id="' + dfop.id + '_btn_direct" title="' + dfop.nodeRemarks.direct + '" ><b class="ico_direct"/></a>'); var toolbtnlen = dfop.toolBtns.length; if (toolbtnlen > 0) { $tool.append('<span></span>'); for (var i = 0; i < toolbtnlen; ++i) { var btn = dfop.toolBtns[i]; $tool.append('<a  type="' + btn + '" id="' + dfop.id + '_btn_' + btn + '" class="sp-workflow-btn" title="' + dfop.nodeRemarks[btn] + '" ><b class="ico_' + btn + '"/></a>') } } dfop.currentBtn = "cursor"; $tool.on("click", function (e) { var $this = $(this); var dfop = $this[0].dfop; e = e || window.event; var tar; switch (e.target.tagName) { case "SPAN": return false; case "DIV": return false; case "B": tar = e.target.parentNode; break; case "A": tar = e.target }; var type = $(tar).attr("type"); $.spworkflow.switchToolBtn(dfop, type); return false }); $self.append($tool) } else { $self.addClass('sp-workflow-preview') } $self.append('<div class="sp-workflow-work"></div>'); var $workArea = $("<div class='sp-workflow-workinner' style='width:5000px;height:5000px'></div>").attr({ "unselectable": "on", "onselectstart": 'return false', "onselect": 'document.selection.empty()' }); $self.children(".sp-workflow-work").spscroll(); $self.children(".sp-workflow-work").find('.sp-scroll-box').append($workArea); $self.children(".sp-workflow-work").find('.sp-scroll-box').css({ 'width': 5000, 'height': 5000 }); $workArea[0].dfop = dfop; $.spworkflow.initDraw($workArea, dfop); $workArea.on("click", $.spworkflow.clickWorkArea); $.spworkflow.initNodeEvent($workArea); $.spworkflow.initLineEvent($workArea); var $ghost = $("<div class='sp-workflow-rsghost'></div>").attr({ "unselectable": "on", "onselectstart": 'return false', "onselect": 'document.selection.empty()' }); $self.append($ghost); var $lineMove = $('<div class="sp-workflow-linemover" style="display:none" ></div>'); $workArea.append($lineMove); $lineMove.on("mousedown", { $workArea: $workArea }, function (e) { if (e.button == 2) return false; var lm = $(this); lm.css({ "background-color": "#333" }); var $workArea = e.data.$workArea; var ev = $.spworkflow.mousePosition(e), t = $.spworkflow.getElCoordinate($workArea[0]); var X, Y; X = ev.x - t.left; Y = ev.y - t.top; var p = lm.position(); var vX = X - p.left, vY = Y - p.top; var isMove = false; document.onmousemove = function (e) { if (!e) e = window.event; var ev = $.spworkflow.mousePosition(e); var ps = lm.position(); X = ev.x - t.left; Y = ev.y - t.top; if (lm.data("type") == "sp") { X = X - vX; if (X < 0) X = 0; else if (X > 5000) X = 5000; lm.css({ left: X + "px" }) } else if (lm.data("type") == "tb") { Y = Y - vY; if (Y < 0) Y = 0; else if (Y > 5000) Y = 5000; lm.css({ top: Y + "px" }) } isMove = true }document.onmouseup = function (e) { var lineId = lm.data("tid"); var dfop = $('#' + lineId)[0].dfop; if (isMove) { var p = lm.position(); if (lm.data("type") == "sp") $.spworkflow.setLineM(lineId, p.left + 3); else if (lm.data("type") == "tb") $.spworkflow.setLineM(lineId, p.top + 3) } lm.css({ "background-color": "transparent" }); if (dfop.focusId == lm.data("tid")) { $.spworkflow.focusItem(lm.data("tid")) } document.onmousemove = null; document.onmouseup = null } }); var $lineOper = $("<div class='sp-workflow-lineoper' style='display:none'><b class='sp'></b><b class='tb'></b><b class='sl'></b><b class='x'></b></div>"); $workArea.append($lineOper); $lineOper.on("click", function (e) { if (!e) e = window.event; if (e.target.tagName != "A" && e.target.tagName != "B") return; var id = $(this).data("tid"); var type = $(e.target).attr("class"); if (type == 'x') { $.spworkflow.delLine(id); this.style.display = "none" } else { $.spworkflow.setLineType(id, type) } }) }, switchToolBtn: function (dfop, type) { var $oldBtn = $('#' + dfop.id + "_btn_" + dfop.currentBtn); var $newBtn = $('#' + dfop.id + "_btn_" + type); $oldBtn.removeClass('sp-workflow-btndown'); $oldBtn.addClass('sp-workflow-btn'); $newBtn.removeClass('sp-workflow-btn'); $newBtn.addClass('sp-workflow-btndown'); dfop.currentBtn = type }, initDraw: function ($workArea, dfop) { var $draw; var elem; $draw = document.createElementNS("http://www.w3.org/2000/svg", "svg"); $workArea.prepend($draw); var defs = document.createElementNS("http://www.w3.org/2000/svg", "defs"); $draw.appendChild(defs); defs.appendChild($.spworkflow.getSvgMarker("arrow1", "gray")); defs.appendChild($.spworkflow.getSvgMarker("arrow2", "#ff3300")); defs.appendChild($.spworkflow.getSvgMarker("arrow3", "#225ee1")); $draw.id = 'draw_' + dfop.id; $draw.style.width = "5000px"; $draw.style.height = "5000px" }, getSvgMarker: function (id, color) { var m = document.createElementNS("http://www.w3.org/2000/svg", "marker"); m.setAttribute("id", id); m.setAttribute("viewBox", "0 0 6 6"); m.setAttribute("refX", 5); m.setAttribute("refY", 3); m.setAttribute("markerUnits", "strokeWidth"); m.setAttribute("markerWidth", 6); m.setAttribute("markerHeight", 6); m.setAttribute("orient", "auto"); var path = document.createElementNS("http://www.w3.org/2000/svg", "path"); path.setAttribute("d", "M 0 0 L 6 3 L 0 6 z"); path.setAttribute("fill", color); path.setAttribute("stroke-width", 0); m.appendChild(path); return m }, clickWorkArea: function (e) { var $this = $(this); var dfop = $this[0].dfop; if (!dfop.isPreview) { e = e || window.event; var type = dfop.currentBtn; if (type == "cursor") { var t = $(e.target); var n = t.prop("tagName"); if (n == "svg" || (n == "DIV" && t.prop("class").indexOf("sp-workflow-workinner") > -1)) { $.spworkflow.blurItem(dfop) } return } else if (type == "direct") { return } var X, Y; var ev = $.spworkflow.mousePosition(e), t = $.spworkflow.getElCoordinate(this); X = ev.x - t.left; Y = ev.y - t.top; var name = dfop.nodeRemarks[type]; var executeadd = true; if (type == 'startround') { name = "开始"; if (dfop.hasStartround) { sp.alert.error('只能有一个开始节点'); return false } } if (type == 'endround') { name = "结束"; if (dfop.hasEndround) { sp.alert.error('只能有一个结束节点'); return false } } $.spworkflow.addNode($this, dfop, { id: sp.newGuid(), name: name, left: X, top: Y, type: type }) } }, blurItem: function (dfop) { if (dfop.focusId != "") { var $item = $("#" + dfop.focusId); if ($item.prop("tagName") == "DIV") { $item.removeClass("sp-workflow-nodefocus"); $item.find('.sp-workflow-nodeclose').hide(); $item.removeClass("sp-workflow-nodemark") } else { var lineData = $.spworkflow.getLine(dfop, dfop.focusId); if (!lineData.marked) { if (lineData.wftype == '2') { $item[0].childNodes[1].setAttribute("stroke", "#ff3300"); $item[0].childNodes[1].setAttribute("marker-end", "url(#arrow2)") } else { $item[0].childNodes[1].setAttribute("stroke", "gray"); $item[0].childNodes[1].setAttribute("marker-end", "url(#arrow1)") } } var $lineOper = $('.sp-workflow-lineoper'); var $lineMove = $('.sp-workflow-linemover'); $lineMove.hide().removeData("type").removeData("tid"); $lineOper.hide().removeData("tid") } } dfop.focusId = ""; return true }, focusItem: function (id) { var $item = $("#" + id); if ($item.length == 0) { return } $item.removeClass("sp-workflow-nodemark"); var dfop = $item[0].dfop; if (!this.blurItem(dfop)) { return } if ($item.prop("tagName") == "DIV") { $item.addClass("sp-workflow-nodefocus"); $item.find('.sp-workflow-nodeclose').show() } else { $item[0].childNodes[1].setAttribute("stroke", "#225ee1"); $item[0].childNodes[1].setAttribute("marker-end", "url(#arrow3)"); var x, y, from, to; from = $item.attr("from").split(","); to = $item.attr("to").split(","); from[0] = parseInt(from[0], 10); from[1] = parseInt(from[1], 10); to[0] = parseInt(to[0], 10); to[1] = parseInt(to[1], 10); var lineData = $.spworkflow.getLine(dfop, id); if (lineData.type == "sp") { from[0] = lineData.M; to[0] = from[0]; var $lineMove = $('.sp-workflow-linemover'); $lineMove.css({ width: "5px", height: (to[1] - from[1]) * (to[1] > from[1] ? 1 : -1) + "px", left: from[0] - 3 + "px", top: (to[1] > from[1] ? from[1] : to[1]) + 1 + "px", cursor: "e-resize", display: "block" }).data({ "type": "sp", "tid": id }) } else if (lineData.type == "tb") { from[1] = lineData.M; to[1] = from[1]; var $lineMove = $('.sp-workflow-linemover'); $lineMove.css({ width: (to[0] - from[0]) * (to[0] > from[0] ? 1 : -1) + "px", height: "5px", left: (to[0] > from[0] ? from[0] : to[0]) + 1 + "px", top: from[1] - 3 + "px", cursor: "s-resize", display: "block" }).data({ "type": "tb", "tid": id }) } x = (from[0] + to[0]) / 2 - 35; y = (from[1] + to[1]) / 2 + 6; var $lineOper = $('.sp-workflow-lineoper'); $lineOper.css({ display: "block", left: x + "px", top: y + "px" }).data("tid", id) } dfop.focusId = id; $.spworkflow.switchToolBtn(dfop, "cursor") }, getElCoordinate: function (dom) { var t = dom.offsetTop; var l = dom.offsetLeft; dom = dom.offsetParent; while (dom) { t += dom.offsetTop; l += dom.offsetLeft; dom = dom.offsetParent }; return { top: t, left: l } }, mousePosition: function (ev) { if (!ev) ev = window.event; if (ev.pageX || ev.pageY) { return { x: ev.pageX, y: ev.pageY } } return { x: ev.clientX + document.documentElement.scrollLeft - document.body.clientLeft, y: ev.clientY + document.documentElement.scrollTop - document.body.clientTop } }, addNode: function ($workArea, dfop, node, isold) { var mark = node.type; var $node; if (!node.width || node.width < 150) node.width = 150; if (!node.height || node.height < 65) node.height = 65; if (!node.top || node.top < 0) node.top = 0; if (!node.left || node.left < 0) node.left = 0; if (mark == "conditionnode") { node.width = 160; node.height = 90; $node = $('<div class="sp-workflow-node item-conditionnode" id="' + node.id + '" ><div class="sp-workflow-nodeico"></div><b class="ico_' + node.type + 'div"></b><div class="sp-workflow-nodetext">' + node.name + '</div><div class="sp-workflow-nodeassemble" ></div></div>') } else if (mark != "startround" && mark != "endround") { $node = $('<div class="sp-workflow-node" id="' + node.id + '" ><div class="sp-workflow-nodeico"><b class="ico_' + node.type + '"></b></div><div class="sp-workflow-nodetext">' + node.name + '</div><div class="sp-workflow-nodeassemble" ></div></div>') } else { node.width = 52; node.height = 52; if (mark == 'startround') { node.name = "开始"; dfop.hasStartround = true } else if (mark == 'endround') { node.name = "结束"; dfop.hasEndround = true } $node = $('<div class="sp-workflow-node item-' + mark + '" id="' + node.id + '" ><div class="sp-workflow-nodeico"></div><div class="sp-workflow-nodetext">' + node.name + '</div><div class="sp-workflow-nodeassemble" ></div></div>') } $node.find('.sp-workflow-nodeassemble').append('<div class="sp-workflow-nodeclose"></div>'); $node.find('.sp-workflow-nodeassemble').append('<div class="sp-workflow-nodespot left"><div class="sp-workflow-nodespotc"></div></div>'); $node.find('.sp-workflow-nodeassemble').append('<div class="sp-workflow-nodespot top"><div class="sp-workflow-nodespotc"></div></div>'); $node.find('.sp-workflow-nodeassemble').append('<div class="sp-workflow-nodespot right"><div class="sp-workflow-nodespotc"></div></div>'); $node.find('.sp-workflow-nodeassemble').append('<div class="sp-workflow-nodespot bottom"><div class="sp-workflow-nodespotc"></div></div>'); $node.css({ 'top': node.top + 'px', 'left': node.left + 'px', 'width': node.width + 'px', 'height': node.height + 'px' }); if (node.state != undefined && (node.type == 'startround' || node.type == 'auditornode' || node.type == 'stepnode' || node.type == 'confluencenode')) { $node.css({ 'padding-left': '0', 'color': '#fff' }).find('.sp-workflow-nodeico').remove(); switch (node.state) { case '0': $node.css({ 'background': '#5bc0de', 'border': '0' }); break; case '1': $node.css({ 'background': '#5cb85c', 'border': '0' }); break; case '2': $node.css({ 'background': '#d9534f', 'border': '0' }); break; case '3': $node.css({ 'background': '#999', 'border': '0' }); break; case '4': $node.css({ 'background': '#f0ad4e', 'border': '0' }); break } } if (!isold) { switch (node.type) { case 'startround': node.wfForms = []; node.authorizeFields = []; node.iocName = ''; node.dbSuccessId = ''; node.dbSuccessSql = ''; break; case 'stepnode': node.dbFailId = ''; node.dbFailSql = ''; case 'auditornode': node.auditors = []; node.wfForms = []; node.authorizeFields = []; node.iocName = ''; node.dbSuccessId = ''; node.dbSuccessSql = ''; node.timeoutAction = 48; node.timeoutNotice = 24; break; case 'confluencenode': node.confluenceType = '1'; node.confluenceRate = '100'; node.iocName = ''; node.dbSuccessId = ''; node.dbSuccessSql = ''; node.dbFailId = ''; node.dbFailSql = ''; break; case 'conditionnode': node.conditions = []; node.dbConditionId = ""; node.conditionSql = ""; break } } $node[0].wfdata = node; $node[0].dfop = dfop; $workArea.append($node); dfop.node.push(node) }, delNode: function (dfop, nodeData) { var tmplines = []; for (var i = 0, l = dfop.line.length; i < l; i++) { var tmpLine = dfop.line[i]; if (tmpLine.from != nodeData.id && tmpLine.to != nodeData.id) { tmplines.push(tmpLine) } else { $('#' + tmpLine.id).remove() } } $('#' + nodeData.id).remove(); dfop.line = tmplines; dfop.node.splice(dfop.node.indexOf(nodeData), 1); if (nodeData.type == 'startround') { dfop.hasStartround = false } else if (nodeData.type == 'endround') { dfop.hasEndround = false } dfop.focusId = "" }, moveNode: function (id, left, top) { if (left < 0) left = 0; if (top < 0) top = 0; var $node = $("#" + id); $node.css({ left: left + "px", top: top + "px" }); var nodedata = $node[0].wfdata; var dfop = $node[0].dfop; nodedata.left = left; nodedata.top = top; this.resetLines(id, dfop) }, updateNodeName: function ($workArea, nodeId) { var $node = $workArea.find('#' + nodeId); var nodeData = $node[0].wfdata; $node.find('.sp-workflow-nodetext').html(nodeData.name) }, initNodeEvent: function ($workArea) { var dfop = $workArea[0].dfop; $workArea.delegate(".sp-workflow-node", "dblclick", { $workArea: $workArea }, function (e) { var $workArea = e.data.$workArea; var dfop = $workArea[0].dfop; var $node = $(this); var nodeData = $node[0].wfdata; dfop.openNode(nodeData) }); if (!dfop.isPreview) { $workArea.delegate(".sp-workflow-node", "click", function (e) { $.spworkflow.focusItem(this.id); return false }); $workArea.delegate(".sp-workflow-node", "contextmenu", function (e) { }); $workArea.delegate(".sp-workflow-nodeico", "mousedown", { $workArea: $workArea }, function (e) { var $node = $(this).parents(".sp-workflow-node"); var dfop = $node[0].dfop; var nodeData = $node[0].wfdata; e = e || window.event; if (dfop.$nowType == "direct") { return } var id = $node.attr("id"); var $workArea = e.data.$workArea; $.spworkflow.focusItem(id); var ev = $.spworkflow.mousePosition(e), t = $.spworkflow.getElCoordinate($workArea[0]); var $ghost = $('#' + dfop.id).find('.sp-workflow-rsghost'); if (nodeData.type == "endround" || nodeData.type == "startround" || nodeData.type == "conditionnode") { $ghost.css({ 'padding-left': '0px' }) } else { $ghost.css({ 'padding-left': '48px' }) } $node.children().clone().prependTo($ghost); if (nodeData.type == "conditionnode") { $ghost.find('b').css({ 'width': '100%', 'height': '100%', 'position': 'absolute', 'z-index': '-1' }) } $ghost.find('.sp-workflow-nodeclose').remove(); var X, Y; X = ev.x - t.left; Y = ev.y - t.top; var vX = X - nodeData.left, vY = Y - nodeData.top; var isMove = false; var hack = 1; if (navigator.userAgent.indexOf("8.0") != -1) hack = 0; document.onmousemove = function (e) { if (!e) e = window.event; var ev = $.spworkflow.mousePosition(e); if (X == ev.x - vX && Y == ev.y - vY) return false; X = ev.x - vX; Y = ev.y - vY - 47; if (isMove && $ghost.css("display") == "none") { $ghost.css({ display: "table", width: $('#' + id).css('width'), height: $('#' + id).css('height'), top: nodeData.top + "px", left: nodeData.left + t.left + "px", cursor: "move" }) } if (X < 60) { X = 60 } else if (X + nodeData.width > t.left + $workArea.width()) { X = t.left + $workArea.width() - nodeData.width } if (Y < 0) { Y = 0 } else if (Y + nodeData.height > t.top + $workArea.height() - 47) { Y = $workArea.height() - nodeData.height + t.top - 47 } $ghost.css({ left: X + "px", top: Y + "px" }); isMove = true }document.onmouseup = function (e) { if (isMove) $.spworkflow.moveNode(id, X - t.left, Y + 47 - t.top); $ghost.empty().hide(); document.onmousemove = null; document.onmouseup = null }return false }); $workArea.delegate(".sp-workflow-node", "mouseenter", { $workArea: $workArea }, function (e) { var dfop = e.data.$workArea[0].dfop; if (dfop.currentBtn != "direct") return; $(this).addClass("sp-workflow-nodemark") }); $workArea.delegate(".sp-workflow-node", "mouseleave", { $workArea: $workArea }, function (e) { var dfop = e.data.$workArea[0].dfop; if (dfop.currentBtn != "direct") return; $(this).removeClass("sp-workflow-nodemark") }); $workArea.delegate(".sp-workflow-nodespot", "mouseenter", { $workArea: $workArea }, function (e) { var dfop = e.data.$workArea[0].dfop; if (dfop.currentBtn != "direct") return; $(this).addClass("sp-workflow-nodespotmark") }); $workArea.delegate(".sp-workflow-nodespot", "mouseleave", { $workArea: $workArea }, function (e) { var dfop = e.data.$workArea[0].dfop; if (dfop.currentBtn != "direct") return; $(this).removeClass("sp-workflow-nodespotmark") }); $workArea.delegate(".sp-workflow-nodespot", "mousedown", { $workArea: $workArea }, function (e) { var dfop = e.data.$workArea[0].dfop; if (dfop.currentBtn != "direct") return; var $this = $(this); var $node = $this.parents('.sp-workflow-node'); var nodeData = $node[0].wfdata; var X, Y; X = nodeData.left; Y = nodeData.top; var position = 'left'; if ($this.hasClass('left')) { position = 'left'; Y += nodeData.height / 2 } else if ($this.hasClass('top')) { position = 'top'; X += nodeData.width / 2 } else if ($this.hasClass('right')) { position = 'right'; X += nodeData.width; Y += nodeData.height / 2 } else if ($this.hasClass('bottom')) { position = 'bottom'; X += nodeData.width / 2; Y += nodeData.height } e.data.$workArea.data("lineStart", { "x": X, "y": Y, "id": nodeData.id, "position": position }).css("cursor", "crosshair"); var line = $.spworkflow.drawLine('1', "sp_workflow_tmp_line", [X, Y], [X, Y], true, true); var $draw = $('#' + dfop.id).find('svg'); $draw.append(line) }); $workArea.mousemove(function (e) { var $workArea = $(this); var dfop = $workArea[0].dfop; if (dfop.currentBtn != "direct") return; var lineStart = $workArea.data("lineStart"); if (!lineStart) return; var ev = $.spworkflow.mousePosition(e), t = $.spworkflow.getElCoordinate(this); var X, Y; X = ev.x - t.left; Y = ev.y - t.top; var line = document.getElementById("sp_workflow_tmp_line"); line.childNodes[0].setAttribute("d", "M " + lineStart.x + " " + lineStart.y + " L " + X + " " + Y); line.childNodes[1].setAttribute("d", "M " + lineStart.x + " " + lineStart.y + " L " + X + " " + Y); if (line.childNodes[1].getAttribute("marker-end") == "url(\"#arrow2\")") line.childNodes[1].setAttribute("marker-end", "url(#arrow3)"); else line.childNodes[1].setAttribute("marker-end", "url(#arrow3)") }); $workArea.mouseup(function (e) { var $workArea = $(this); var dfop = $workArea[0].dfop; if (dfop.currentBtn != "direct") return; $(this).css("cursor", "auto").removeData("lineStart"); $("#sp_workflow_tmp_line").remove() }); $workArea.delegate(".sp-workflow-nodespot", "mouseup", { $workArea: $workArea }, function (e) { var $workArea = e.data.$workArea; var dfop = $workArea[0].dfop; if (dfop.currentBtn != "direct") return; var $this = $(this); var $node = $this.parents('.sp-workflow-node'); var nodeData = $node[0].wfdata; var lineStart = $workArea.data("lineStart"); var position = 'left'; if ($this.hasClass('left')) { position = 'left' } else if ($this.hasClass('top')) { position = 'top' } else if ($this.hasClass('right')) { position = 'right' } else if ($this.hasClass('bottom')) { position = 'bottom' } if (lineStart) $.spworkflow.addLine(dfop, { id: sp.newGuid(), from: lineStart.id, to: nodeData.id, sp: lineStart.position, ep: position, name: "" }) }); $workArea.delegate(".sp-workflow-nodeclose", "click", function () { var $node = $(this).parents('.sp-workflow-node'); var nodeData = $node[0].wfdata; var dfop = $node[0].dfop; $.spworkflow.delNode(dfop, nodeData); return false }) } }, initLineEvent: function ($workArea) { var dfop = $workArea[0].dfop; if (!dfop.isPreview) { $workArea.delegate('g', "click", function (e) { $.spworkflow.focusItem(this.id) }); $workArea.delegate('g', "dblclick", { $workArea: $workArea }, function (e) { var $workArea = e.data.$workArea; var dfop = $workArea[0].dfop; var lineData = $.spworkflow.getLine(dfop, this.id); dfop.openLine(lineData) }) } }, getLine: function (dfop, lineId) { for (var i = 0, l = dfop.line.length; i < l; i++) { if (lineId == dfop.line[i].id) { return dfop.line[i] } } }, getLineSpotXY: function (nodeId, dfop, type) { var nodeData; for (var i = 0, l = dfop.node.length; i < l; i++) { if (nodeId == dfop.node[i].id) { nodeData = dfop.node[i]; break } } var X, Y; X = nodeData.left; Y = nodeData.top; switch (type) { case 'left': Y += nodeData.height / 2; break; case 'top': X += nodeData.width / 2; break; case 'right': X += nodeData.width; Y += nodeData.height / 2; break; case 'bottom': X += nodeData.width / 2; Y += nodeData.height; break }return [X, Y] }, drawLine: function (wftype, id, sp, ep, mark, dash, cursor) { var line; line = document.createElementNS("http://www.w3.org/2000/svg", "g"); var hi = document.createElementNS("http://www.w3.org/2000/svg", "path"); var path = document.createElementNS("http://www.w3.org/2000/svg", "path"); if (id != "") line.setAttribute("id", id); line.setAttribute("from", sp[0] + "," + sp[1]); line.setAttribute("to", ep[0] + "," + ep[1]); hi.setAttribute("visibility", "hidden"); hi.setAttribute("stroke-width", 9); hi.setAttribute("fill", "none"); hi.setAttribute("stroke", "white"); hi.setAttribute("d", "M " + sp[0] + " " + sp[1] + " L " + ep[0] + " " + ep[1]); hi.setAttribute("pointer-events", "stroke"); path.setAttribute("d", "M " + sp[0] + " " + sp[1] + " L " + ep[0] + " " + ep[1]); path.setAttribute("stroke-width", 2.0); path.setAttribute("stroke-linecap", "round"); path.setAttribute("fill", "none"); if (dash) path.setAttribute("style", "stroke-dasharray:6,5"); if (mark) { path.setAttribute("stroke", "#3498DB"); path.setAttribute("marker-end", "url(#arrow3)") } else if (wftype == '2') { path.setAttribute("stroke", "#ff3300"); path.setAttribute("marker-end", "url(#arrow2)") } else { path.setAttribute("stroke", "gray"); path.setAttribute("marker-end", "url(#arrow1)") } line.appendChild(hi); line.appendChild(path); line.style.cursor = "crosshair"; if (id != "" && id != "sp_workflow_tmp_line") { var text = document.createElementNS("http://www.w3.org/2000/svg", "text"); line.appendChild(text); var x = (ep[0] + sp[0]) / 2; var y = (ep[1] + sp[1]) / 2; text.setAttribute("text-anchor", "middle"); text.setAttribute("x", x); text.setAttribute("y", y - 5); line.style.cursor = "pointer"; text.style.cursor = "text" } return line }, drawPoly: function (wftype, id, sp, m1, m2, ep, mark) { var poly, strPath; poly = document.createElementNS("http://www.w3.org/2000/svg", "g"); var hi = document.createElementNS("http://www.w3.org/2000/svg", "path"); var path = document.createElementNS("http://www.w3.org/2000/svg", "path"); if (id != "") poly.setAttribute("id", id); poly.setAttribute("from", sp[0] + "," + sp[1]); poly.setAttribute("to", ep[0] + "," + ep[1]); hi.setAttribute("visibility", "hidden"); hi.setAttribute("stroke-width", 9); hi.setAttribute("fill", "none"); hi.setAttribute("stroke", "white"); strPath = "M " + sp[0] + " " + sp[1]; if (m1[0] != sp[0] || m1[1] != sp[1]) strPath += " L " + m1[0] + " " + m1[1]; if (m2[0] != ep[0] || m2[1] != ep[1]) strPath += " L " + m2[0] + " " + m2[1]; strPath += " L " + ep[0] + " " + ep[1]; hi.setAttribute("d", strPath); hi.setAttribute("pointer-events", "stroke"); path.setAttribute("d", strPath); path.setAttribute("stroke-width", 2.0); path.setAttribute("stroke-linecap", "round"); path.setAttribute("fill", "none"); if (mark) { path.setAttribute("stroke", "#3498DB"); path.setAttribute("marker-end", "url(#arrow3)") } else if (wftype == '2') { path.setAttribute("stroke", "#ff3300"); path.setAttribute("marker-end", "url(#arrow2)") } else { path.setAttribute("stroke", "gray"); path.setAttribute("marker-end", "url(#arrow1)") } poly.appendChild(hi); poly.appendChild(path); var text = document.createElementNS("http://www.w3.org/2000/svg", "text"); poly.appendChild(text); var x = (m2[0] + m1[0]) / 2; var y = (m2[1] + m1[1]) / 2; text.setAttribute("text-anchor", "middle"); text.setAttribute("x", x); text.setAttribute("y", y - 5); text.style.cursor = "text"; poly.style.cursor = "pointer"; return poly }, calcPolyPoints: function (SP, EP, type, M) { var m1 = [], m2 = [], m; if (type == "sp") { var m = M || (SP[0] + EP[0]) / 2; m1 = [m, SP[1]]; m2 = [m, EP[1]] } else if (type == "tb") { var m = M || (SP[1] + EP[1]) / 2; m1 = [SP[0], m]; m2 = [EP[0], m] } return { start: SP, m1: m1, m2: m2, end: EP } }, addLine: function (dfop, line) { var $line; if (line.from == line.to) return; for (var i = 0, l = dfop.line.length; i < l; i++) { if ((line.from == dfop.line[i].from && line.to == dfop.line[i].to)) { return } } var sxy = $.spworkflow.getLineSpotXY(line.from, dfop, line.sp); var exy = $.spworkflow.getLineSpotXY(line.to, dfop, line.ep); line.name = line.name || ''; line.wftype = line.wftype || '1'; dfop.line.push(line); if (line.type && line.type != "sl") { var res = $.spworkflow.calcPolyPoints(sxy, exy, line.type, line.M); $line = $.spworkflow.drawPoly(line.wftype, line.id, res.start, res.m1, res.m2, res.end, line.mark) } else { line.type = "sl"; $line = $.spworkflow.drawLine(line.wftype, line.id, sxy, exy, line.mark) } var $draw = $('#' + dfop.id).find('svg'); $($line)[0].dfop = dfop; if (line.name != "") { $($line).find('text').html(line.name) } $draw.append($line) }, resetLines: function (nodeId, dfop) { var $line; for (var i = 0, l = dfop.line.length; i < l; i++) { var sxy = []; var exy = []; var line = dfop.line[i]; if (line.from == nodeId || line.to == nodeId) { sxy = $.spworkflow.getLineSpotXY(line.from, dfop, line.sp); exy = $.spworkflow.getLineSpotXY(line.to, dfop, line.ep); $('#' + line.id).remove(); if (line.type == "sl") { $line = $.spworkflow.drawLine(line.wftype, line.id, sxy, exy, line.mark) } else { var res = $.spworkflow.calcPolyPoints(sxy, exy, line.type, line.M); $line = $.spworkflow.drawPoly(line.wftype, line.id, res.start, res.m1, res.m2, res.end, line.mark) } var $draw = $('#' + dfop.id).find('svg'); $($line)[0].dfop = dfop; $draw.append($line); var lineId = $($line).attr('id'); var lineData = $.spworkflow.getLine(dfop, lineId); $($line).find('text').html(lineData.name) } } }, setLineType: function (id, newType) { var $line = $('#' + id); var dfop = $line[0].dfop; var lineData = $.spworkflow.getLine(dfop, id); if (!newType || newType == null || newType == "" || newType == lineData.type) return false; var from = lineData.from; var to = lineData.to; lineData.type = newType; var sxy = $.spworkflow.getLineSpotXY(from, dfop, lineData.sp); var exy = $.spworkflow.getLineSpotXY(to, dfop, lineData.ep); var res; if (newType != "sl") { var res = $.spworkflow.calcPolyPoints(sxy, exy, lineData.type, lineData.M); $.spworkflow.setLineM(id, $.spworkflow.getMValue(sxy, exy, newType), true) } else { delete lineData.M; var $lineMove = $('.sp-workflow-linemover'); $lineMove.hide().removeData("type").removeData("tid"); $line.remove(); $line = $.spworkflow.drawLine(lineData.wftype, lineData.id, sxy, exy, lineData.mark); var $draw = $('#' + dfop.id).find('svg'); $($line)[0].dfop = dfop; $draw.append($line); var lineData = $.spworkflow.getLine(dfop, id); $($line).find('text').html(lineData.name) } if (dfop.focusId == id) { $.spworkflow.focusItem(id) } }, setLineM: function (id, M, noStack) { var dfop = $('#' + id)[0].dfop; var lineData = $.spworkflow.getLine(dfop, id); if (!lineData || M < 0 || !lineData.type || lineData.type == "sl") return false; var from = lineData.from; var to = lineData.to; lineData.M = M; var sxy = $.spworkflow.getLineSpotXY(from, dfop, lineData.sp); var exy = $.spworkflow.getLineSpotXY(to, dfop, lineData.ep); var ps = $.spworkflow.calcPolyPoints(sxy, exy, lineData.type, lineData.M); $('#' + id).remove(); console.log(lineData); var $line = $.spworkflow.drawPoly(lineData.wftype, id, ps.start, ps.m1, ps.m2, ps.end, lineData.marked || dfop.focusId == id); var $draw = $('#' + dfop.id).find('svg'); $($line)[0].dfop = dfop; $draw.append($line); $($line).find('text').html(lineData.name) }, getMValue: function (sxy, exy, mType) { if (mType == "sp") { return (sxy[0] + exy[0]) / 2 } else if (mType == "tb") { return (sxy[1] + exy[1]) / 2 } }, delLine: function (lineId) { var $line = $('#' + lineId)var dfop = $line[0].dfop; for (var i = 0, l = dfop.line.length; i < l; i++) { if (lineId == dfop.line[i].id) { dfop.line.splice(i, 1); break } } dfop.focusId = ""; $line.remove() }, updateLineName: function ($workArea, lineId) { var $line = $('#' + lineId); var dfop = $workArea[0].dfop; var lineData = $.spworkflow.getLine(dfop, lineId); $line.find('text').html(lineData.name); if (lineData.wftype == '2') { $line[0].childNodes[1].setAttribute("stroke", "#ff3300"); $line[0].childNodes[1].setAttribute("marker-end", "url(#arrow2)") } else { $line[0].childNodes[1].setAttribute("stroke", "gray"); $line[0].childNodes[1].setAttribute("marker-end", "url(#arrow1)") } } }; $.fn.spworkflow = function (op) { var dfop = { openNode: function () { }, openLine: function () { }, toolBtns: ["startround", "endround", "stepnode", "confluencenode", "conditionnode", "auditornode"], nodeRemarks: { cursor: "选择指针", direct: "步骤连线", startround: "开始节点", endround: "结束节点", stepnode: "普通节点", confluencenode: "会签节点", conditionnode: "条件判断节点", auditornode: "传阅节点" }, node: [], line: [], hasStartround: false, hasEndround: false, focusId: '' }; $.extend(dfop, op); var $self = $(this); dfop.id = $self.attr("id"); $self[0].dfop = dfop; $.spworkflow.render($self) }; $.fn.spworkflowGet = function () { var $self = $(this); var $workArea = $self.find(".sp-workflow-workinner"); var dfop = $workArea[0].dfop; var data = { nodes: dfop.node, lines: dfop.line }; return data }$.fn.spworkflowSet = function (name, op) { var $self = $(this); var $workArea = $self.find(".sp-workflow-workinner"); switch (name) { case 'updateNodeName': $.spworkflow.updateNodeName($workArea, op.nodeId); break; case 'updateLineName': $.spworkflow.updateLineName($workArea, op.lineId); break; case 'set': var dfop = $workArea[0].dfop; for (var i = 0, l = op.data.nodes.length; i < l; i++) { var node = op.data.nodes[i]; $.spworkflow.addNode($workArea, dfop, node, true) } for (var i = 0, l = op.data.lines.length; i < l; i++) { var line = op.data.lines[i]; $.spworkflow.addLine(dfop, line) } break } } })(jQuery, top.sp);
