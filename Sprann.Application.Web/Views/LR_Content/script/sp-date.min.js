(function ($, sp) { "use strict"; $.extend(sp, { parseDate: function (strDate) { var myDate; if (strDate.indexOf("/Date(") > -1) myDate = new Date(parseInt(strDate.replace("/Date(", "").replace(")/", ""), 10)); else myDate = new Date(Date.parse(strDate.replace(/-/g, "/").replace("T", " ").split(".")[0])); return myDate }, formatDate: function (v, format) { if (!v) return ""; var d = v; if (typeof v === 'string') { if (v.indexOf("/Date(") > -1) d = new Date(parseInt(v.replace("/Date(", "").replace(")/", ""), 10)); else d = new Date(Date.parse(v.replace(/-/g, "/").replace("T", " ").split(".")[0])) } var o = { "M+": d.getMonth() + 1, "d+": d.getDate(), "h+": d.getHours(), "m+": d.getMinutes(), "s+": d.getSeconds(), "q+": Math.floor((d.getMonth() + 3) / 3), "S": d.getMilliseconds() }; if (/(y+)/.test(format)) { format = format.replace(RegExp.$1, (d.getFullYear() + "").substr(4 - RegExp.$1.length)) } for (var k in o) { if (new RegExp("(" + k + ")").test(format)) { format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length)) } } return format }, getDate: function (format, strInterval, Number) { var myDate = new Date(); if (!!strInterval) { myDate = myDate.DateAdd(strInterval, Number) } var res = sp.formatDate(myDate, format); return res }, getMonth: function () { var res = { begin: '', end: '' }; var currentDate = sp.parseDate(sp.formatDate(new Date(), "yyyy-MM-01")); var endDate = currentDate.DateAdd('m', 1).DateAdd('d', -1); res.begin = sp.formatDate(currentDate, 'yyyy-MM-dd 00:00:00'); res.end = sp.formatDate(endDate, 'yyyy-MM-dd 23:59:59'); return res }, getPreMonth: function () { var res = { begin: '', end: '' }; var currentDate = sp.parseDate(sp.formatDate(new Date(), "yyyy-MM-01")); var preMonth = currentDate.DateAdd('d', -1); res.begin = sp.formatDate(preMonth, 'yyyy-MM-01 00:00:00'); res.end = sp.formatDate(preMonth, 'yyyy-MM-dd 23:59:59'); return res }, getCurrentQuarter: function () { var currentDate = new Date(); return sp.getQuarter(currentDate.getFullYear(), currentDate.getMonth()) }, getPreQuarter: function () { var currentDate = new Date().DateAdd('q', -1); return sp.getQuarter(currentDate.getFullYear(), currentDate.getMonth()) }, getQuarter: function (Year, month) { var res = { begin: '', end: '' }; switch (month) { case 0: case 1: case 2: res.begin = Year + "-01-01 00:00:00"; res.end = Year + "-03-31 23:59:59"; break; case 3: case 4: case 5: res.begin = Year + "-04-01 00:00:00"; res.end = Year + "-06-30 23:59:59"; break; case 6: case 7: case 8: res.begin = Year + "-07-01 00:00:00"; res.end = Year + "-09-30 23:59:59"; break; case 9: case 10: case 11: res.begin = Year + "-10-01 00:00:00"; res.end = Year + "-12-31 23:59:59"; break }return res }, getYear: function () { var currentDate = new Date(); var res = { begin: '', end: '' }; var year = currentDate.getFullYear(); res.begin = year + '-01-01 00:00:00'; res.end = year + '-12-31 23:59:59'; return res }, getPreYear: function () { var currentDate = new Date(); var res = { begin: '', end: '' }; var year = currentDate.getFullYear() - 1; res.begin = year + '-01-01 00:00:00'; res.end = year + '-12-31 23:59:59'; return res }, getFirstHalfYear: function () { var currentDate = new Date(); var res = { begin: '', end: '' }; var year = currentDate.getFullYear(); res.begin = year + '-01-01 00:00:00'; res.end = year + '-06-30 23:59:59'; return res }, getSecondHalfYear: function () { var currentDate = new Date(); var res = { begin: '', end: '' }; var year = currentDate.getFullYear(); res.begin = year + '-07-01 00:00:00'; res.end = year + '-12-31 23:59:59'; return res } }); Date.prototype.DateAdd = function (strInterval, Number) { var dtTmp = this; switch (strInterval) { case 's': return new Date(Date.parse(dtTmp) + (1000 * Number)); case 'n': return new Date(Date.parse(dtTmp) + (60000 * Number)); case 'h': return new Date(Date.parse(dtTmp) + (3600000 * Number)); case 'd': return new Date(Date.parse(dtTmp) + (86400000 * Number)); case 'w': return new Date(Date.parse(dtTmp) + ((86400000 * 7) * Number)); case 'q': return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number * 3, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds()); case 'm': return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds()); case 'y': return new Date((dtTmp.getFullYear() + Number), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds()) } }; Date.prototype.DateDiff = function (strInterval, dtEnd) { var dtStart = this; if (typeof dtEnd == 'string') { dtEnd = sp.parseDate(dtEnd) } switch (strInterval) { case 's': return parseInt((dtEnd - dtStart) / 1000); case 'n': return parseInt((dtEnd - dtStart) / 60000); case 'h': return parseInt((dtEnd - dtStart) / 3600000); case 'd': return parseInt((dtEnd - dtStart) / 86400000); case 'w': return parseInt((dtEnd - dtStart) / (86400000 * 7)); case 'm': return (dtEnd.getMonth() + 1) + ((dtEnd.getFullYear() - dtStart.getFullYear()) * 12) - (dtStart.getMonth() + 1); case 'y': return dtEnd.getFullYear() - dtStart.getFullYear() } }; Date.prototype.MaxDayOfDate = function () { var myDate = this; var ary = myDate.toArray(); var date1 = (new Date(ary[0], ary[1] + 1, 1)); var date2 = date1.DateAdd('m', 1); var result = dateDiff(date1.Format('yyyy-MM-dd'), date2.Format('yyyy-MM-dd')); return result }; Date.prototype.isLeapYear = function () { return (0 == this.getYear() % 4 && ((this.getYear() % 100 != 0) || (this.getYear() % 400 == 0))) } })(jQuery, top.sp);
