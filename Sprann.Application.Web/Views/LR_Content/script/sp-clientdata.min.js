(function ($, sp) { "use strict"; var loadSate = { no: -1, yes: 1, ing: 0, fail: 2 }; var clientDataFn = {}; var clientAsyncData = {}; var clientData = {}; function initLoad(callback) { var res = loadSate.yes; for (var id in clientDataFn) { var _fn = clientDataFn[id]; if (_fn.state == loadSate.fail) { res = loadSate.fail; break } else if (_fn.state == loadSate.no) { res = loadSate.ing; _fn.init() } else if (_fn.state == loadSate.ing) { res = loadSate.ing } } if (res == loadSate.yes) { callback(true) } else if (res == loadSate.fail) { callback(false) } else { setTimeout(function () { initLoad(callback) }, 100) } } function get(key, data) { var res = ""; var len = data.length; if (len == undefined) { res = data[key] } else { for (var i = 0; i < len; i++) { if (key(data[i])) { res = data[i]; break } } } return res } sp.clientdata = { init: function (callback) { initLoad(function (res) { callback(res); if (res) { clientAsyncData.company.init() } }) }, get: function (nameArray) { var res = ""; if (!nameArray) { return res } var len = nameArray.length; var data = clientData; for (var i = 0; i < len; i++) { res = get(nameArray[i], data); if (res != "" && res != undefined) { data = res } else { break } } res = res || ""; return res }, getAsync: function (name, op) { return clientAsyncData[name].get(op) }, getAllAsync: function (name, op) { return clientAsyncData[name].getAll(op) }, getsAsync: function (name, op) { return clientAsyncData[name].gets(op) }, update: function (name) { clientAsyncData[name].update && clientAsyncData[name].update() } }; clientDataFn.modules = { state: loadSate.no, init: function () { clientDataFn.modules.state = loadSate.ing; sp.httpAsyncGet($.rootUrl + '/LR_SystemModule/Module/GetModuleList', function (res) { if (res.code == sp.httpCode.success) { clientData.modules = res.data; clientDataFn.modules.toMap(); clientDataFn.modules.state = loadSate.yes } else { clientData.modules = []; clientDataFn.modules.toMap(); clientDataFn.modules.state = loadSate.fail } }) }, toMap: function () { var modulesTree = {}; var modulesMap = {}; var _len = clientData.modules.length; for (var i = 0; i < _len; i++) { var _item = clientData.modules[i]; if (_item.F_EnabledMark == 1) { modulesTree[_item.F_ParentId] = modulesTree[_item.F_ParentId] || []; modulesTree[_item.F_ParentId].push(_item); modulesMap[_item.F_ModuleId] = _item } } clientData.modulesTree = modulesTree; clientData.modulesMap = modulesMap } }; clientDataFn.userinfo = { state: loadSate.no, init: function () { clientDataFn.userinfo.state = loadSate.ing; sp.httpAsyncGet($.rootUrl + '/Login/GetUserInfo', function (res) { if (res.code == sp.httpCode.success) { clientData.userinfo = res.data; clientDataFn.userinfo.state = loadSate.yes } else { clientDataFn.userinfo.state = loadSate.fail } }) } }; var storage = { get: function (name) { if (localStorage) { return JSON.parse(localStorage.getItem(name)) || {} } else { return clientData[name] || {} } }, set: function (name, data) { if (localStorage) { localStorage.setItem(name, JSON.stringify(data)) } else { clientData[name] = data } } }; clientAsyncData.company = { states: loadSate.no, init: function () { if (clientAsyncData.company.states == loadSate.no) { clientAsyncData.company.states = loadSate.ing; var ver = storage.get("companyData").ver || ""; sp.httpAsync('GET', top.$.rootUrl + '/LR_OrganizationModule/Company/GetMap', { ver: ver }, function (data) { if (!data) { clientAsyncData.company.states = loadSate.fail } else { if (data.ver) { storage.set("companyData", data) } clientAsyncData.company.states = loadSate.yes; clientAsyncData.department.init() } }) } }, get: function (op) { clientAsyncData.company.init(); if (clientAsyncData.company.states == loadSate.ing) { setTimeout(function () { clientAsyncData.company.get(op) }, 100) } else { var data = storage.get("companyData").data || {}; op.callback(data[op.key] || {}, op) } }, getAll: function (op) { clientAsyncData.company.init(); if (clientAsyncData.company.states == loadSate.ing) { setTimeout(function () { clientAsyncData.company.getAll(op) }, 100) } else { var data = storage.get("companyData").data || {}; op.callback(data, op) } } }; clientAsyncData.department = { states: loadSate.no, init: function () { if (clientAsyncData.department.states == loadSate.no) { clientAsyncData.department.states = loadSate.ing; var ver = storage.get("departmentData").ver || ""; sp.httpAsync('GET', top.$.rootUrl + '/LR_OrganizationModule/Department/GetMap', { ver: ver }, function (data) { if (!data) { clientAsyncData.department.states = loadSate.fail } else { if (data.ver) { storage.set("departmentData", data) } clientAsyncData.department.states = loadSate.yes; clientAsyncData.user.init() } }) } }, get: function (op) { clientAsyncData.department.init(); if (clientAsyncData.department.states == loadSate.ing) { setTimeout(function () { clientAsyncData.department.get(op) }, 100) } else { var data = storage.get("departmentData").data || {}; op.callback(data[op.key] || {}, op) } }, getAll: function (op) { clientAsyncData.department.init(); if (clientAsyncData.department.states == loadSate.ing) { setTimeout(function () { clientAsyncData.department.getAll(op) }, 100) } else { var data = storage.get("departmentData").data || {}; op.callback(data, op) } } }; clientAsyncData.user = { states: loadSate.no, init: function () { if (clientAsyncData.user.states == loadSate.no) { clientAsyncData.user.states = loadSate.ing; var ver = storage.get("userData").ver || ""; sp.httpAsync('GET', top.$.rootUrl + '/LR_OrganizationModule/User/GetMap', { ver: ver }, function (data) { if (!data) { clientAsyncData.user.states = loadSate.fail } else { if (data.ver) { storage.set("userData", data) } clientAsyncData.user.states = loadSate.yes; clientAsyncData.dataItem.init() } }) } }, get: function (op) { clientAsyncData.user.init(); if (clientAsyncData.user.states == loadSate.ing) { setTimeout(function () { clientAsyncData.user.get(op) }, 100) } else { var data = storage.get("userData").data || {}; op.callback(data[op.key] || {}, op) } }, getAll: function (op) { clientAsyncData.user.init(); if (clientAsyncData.user.states == loadSate.ing) { setTimeout(function () { clientAsyncData.user.getAll(op) }, 100) } else { var data = storage.get("userData").data || {}; op.callback(data, op) } } }; clientAsyncData.dataItem = { states: loadSate.no, init: function () { if (clientAsyncData.dataItem.states == loadSate.no) { clientAsyncData.dataItem.states = loadSate.ing; var ver = storage.get("dataItemData").ver || ""; sp.httpAsync('GET', top.$.rootUrl + '/LR_SystemModule/DataItem/GetMap', { ver: ver }, function (data) { if (!data) { clientAsyncData.dataItem.states = loadSate.fail } else { if (data.ver) { storage.set("dataItemData", data) } clientAsyncData.dataItem.states = loadSate.yes; clientAsyncData.db.init() } }) } }, get: function (op) { clientAsyncData.dataItem.init(); if (clientAsyncData.dataItem.states == loadSate.ing) { setTimeout(function () { clientAsyncData.dataItem.get(op) }, 100) } else { var data = storage.get("dataItemData").data || {}; var _item = clientAsyncData.dataItem.find(op.key, data[op.code] || {}); if (_item) { top.sp.language.get(_item.text, function (text) { _item.text = text; op.callback(_item, op) }) } else { op.callback({}, op) } } }, getAll: function (op) { clientAsyncData.dataItem.init(); if (clientAsyncData.dataItem.states == loadSate.ing) { setTimeout(function () { clientAsyncData.dataItem.getAll(op) }, 100) } else { var data = storage.get("dataItemData").data || {}; var res = {}; $.each(data[op.code] || {}, function (_index, _item) { _item.text = top.sp.language.getSyn(_item.text); res[_index] = _item }); op.callback(res, op) } }, gets: function (op) { clientAsyncData.dataItem.init(); if (clientAsyncData.dataItem.states == loadSate.ing) { setTimeout(function () { clientAsyncData.dataItem.get(op) }, 100) } else { var data = storage.get("dataItemData").data || {}; var keyList = op.key.split(','); var _text = []; $.each(keyList, function (_index, _item) { var _item = clientAsyncData.dataItem.find(_item, data[op.code] || {}); top.sp.language.get(_item.text, function (text) { _text.push(text) }) }); op.callback(String(_text), op) } }, find: function (key, data) { var res = {}; for (var id in data) { if (data[id].value == key) { res = data[id]; break } } return res }, update: function () { clientAsyncData.dataItem.states = loadSate.no; clientAsyncData.dataItem.init() } }; clientAsyncData.db = { states: loadSate.no, init: function () { if (clientAsyncData.db.states == loadSate.no) { clientAsyncData.db.states = loadSate.ing; var ver = storage.get("dbData").ver || ""; sp.httpAsync('GET', top.$.rootUrl + '/LR_SystemModule/DatabaseLink/GetMap', { ver: ver }, function (data) { if (!data) { clientAsyncData.db.states = loadSate.fail } else { if (data.ver) { storage.set("dbData", data) } clientAsyncData.db.states = loadSate.yes } }) } }, get: function (op) { clientAsyncData.db.init(); if (clientAsyncData.db.states == loadSate.ing) { setTimeout(function () { clientAsyncData.db.get(op) }, 100) } else { var data = storage.get("dbData").data || {}; op.callback(data[op.key] || {}, op) } }, getAll: function (op) { clientAsyncData.db.init(); if (clientAsyncData.db.states == loadSate.ing) { setTimeout(function () { clientAsyncData.db.getAll(op) }, 100) } else { var data = storage.get("dbData").data || {}; op.callback(data, op) } } }; clientAsyncData.sourceData = { states: {}, get: function (op) { if (clientAsyncData.sourceData.states[op.code] == undefined || clientAsyncData.sourceData.states[op.code] == loadSate.no) { clientAsyncData.sourceData.states[op.code] = loadSate.ing; clientAsyncData.sourceData.load(op.code) } if (clientAsyncData.sourceData.states[op.code] == loadSate.ing) { setTimeout(function () { clientAsyncData.sourceData.get(op) }, 100) } else { var data = storage.get("sourceData_" + op.code).data || []; if (!!data) { op.callback(clientAsyncData.sourceData.find(op.key, op.keyId, data) || {}, op) } else { op.callback({}, op) } } }, getAll: function (op) { if (clientAsyncData.sourceData.states[op.code] == undefined || clientAsyncData.sourceData.states[op.code] == loadSate.no) { clientAsyncData.sourceData.states[op.code] = loadSate.ing; clientAsyncData.sourceData.load(op.code) } if (clientAsyncData.sourceData.states[op.code] == loadSate.ing) { setTimeout(function () { clientAsyncData.sourceData.getAll(op) }, 100) } else if (clientAsyncData.sourceData.states[op.code] == loadSate.yes) { var data = storage.get("sourceData_" + op.code).data || []; if (!!data) { op.callback(data, op) } else { op.callback({}, op) } } }, load: function (code) { var ver = storage.get("sourceData_" + code).ver || ""; sp.httpAsync('GET', top.$.rootUrl + '/LR_SystemModule/DataSource/GetMap', { code: code, ver: ver }, function (data) { if (!data) { clientAsyncData.sourceData.states[code] = loadSate.fail } else { if (data.ver) { storage.set("sourceData_" + code, data) } clientAsyncData.sourceData.states[code] = loadSate.yes } }) }, find: function (key, keyId, data) { var res = {}; for (var i = 0, l = data.length; i < l; i++) { if (data[i][keyId] == key) { res = data[i]; break } } return res } }; clientAsyncData.custmerData = { states: {}, get: function (op) { if (clientAsyncData.custmerData.states[op.url] == undefined || clientAsyncData.custmerData.states[op.url] == loadSate.no) { clientAsyncData.custmerData.states[op.url] = loadSate.ing; clientAsyncData.custmerData.load(op.url) } if (clientAsyncData.custmerData.states[op.url] == loadSate.ing) { setTimeout(function () { clientAsyncData.custmerData.get(op) }, 100) } else { var data = clientData[op.url] || []; if (!!data) { op.callback(clientAsyncData.custmerData.find(op.key, op.keyId, data) || {}, op) } else { op.callback({}, op) } } }, gets: function (op) { if (clientAsyncData.custmerData.states[op.url] == undefined || clientAsyncData.custmerData.states[op.url] == loadSate.no) { clientAsyncData.custmerData.states[op.url] = loadSate.ing; clientAsyncData.custmerData.load(op.url) } if (clientAsyncData.custmerData.states[op.url] == loadSate.ing) { setTimeout(function () { clientAsyncData.custmerData.get(op) }, 100) } else { var data = clientData[op.url] || []; if (!!data) { var keyList = op.key.split(','); var _text = []; $.each(keyList, function (_index, _item) { var _item = clientAsyncData.custmerData.find(op.key, op.keyId, data) || {}; if (_item[op.textId]) { _text.push(_item[op.textId]) } }); op.callback(String(_text), op) } else { op.callback('', op) } } }, getAll: function (op) { if (clientAsyncData.custmerData.states[op.url] == undefined || clientAsyncData.custmerData.states[op.url] == loadSate.no) { clientAsyncData.custmerData.states[op.url] = loadSate.ing; clientAsyncData.custmerData.load(op.url) } if (clientAsyncData.custmerData.states[op.url] == loadSate.ing) { setTimeout(function () { clientAsyncData.custmerData.get(op) }, 100) } else { var data = clientData[op.url] || []; if (!!data) { op.callback(data, op) } else { op.callback([], op) } } }, load: function (url) { sp.httpAsync('GET', top.$.rootUrl + url, {}, function (data) { if (!!data) { clientData[url] = data } clientAsyncData.custmerData.states[url] = loadSate.yes }) }, find: function (key, keyId, data) { var res = {}; for (var i = 0, l = data.length; i < l; i++) { if (data[i][keyId] == key) { res = data[i]; break } } return res } } })(window.jQuery, top.sp);
